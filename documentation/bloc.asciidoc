:toc: macro
toc::[]
:figure-caption:


= BLoC
In the production environment, managing state is significant when developing an application. Developers want to know what state the application is in at any given time. Likewise, it is important to determine if the developed application will respond appropriately in any scenario. Furthermore, it is important that developers work smoothly within a code base following the same pattern in order to develop fast and responsive applications. 

This is where the BLoC pattern comes into play. BLoC stands for Business Logic Components and makes it easy to separate the presentation from the business logic. This makes it possible to reuse the code and test it quickly and easily. 

There are several solutions for state management. However, it is up to you to decide which solution is most appropriate for your team and your project. 

BLoC consists of three core values:

* BLoC is designed so that any developer with different skill levels can understand and use the BLoC Pattern.
* BLoC is powerful. BLoC can be used to create complex and impressive applications that are made up of smaller components.
* Every aspect of an application can be tested, allowing developers to iterate with confidence.
BLoC attempts to make state changes predictable.

== The architecture of BLoC 

.BLoC Architecture 
image::https://bloclibrary.dev/assets/bloc_architecture_full.png["BLoC Architecture",scaledwidth="80%",align="center",link="https://bloclibrary.dev/#/de-de/architecture"]


Using the BLoC library, it is possible to divide an application into three layers:

* *Presentation layer:* The presentation layer represents the states of one or more BLoC states. Furthermore, it processes the user input as well as events in the life cycle of the application.
* *Business logic layer:* The task of the business logic layer is to react to new states that are created by an input of the presentation layer. In order to be able to retrieve data required to build the application state, the business logic layer can depend on one or more repositories.
* *Data layer*, which is divided into repository and data provider: The data layer has the task of retrieving or influencing data from one or more data sources. The data provider should be generic as well as versatile and has the task to provide raw data. The repository serves as a wrapper so that the data provider can communicate with the BLoC layer.

== Links
With the following links, you can find all the information you need about BLoC:

* https://www.youtube.com/watch?v=w6XWjpBK4W8&list=PLptHs0ZDJKt_T-oNj_6Q98v-tBnVf-S_o[BLOC zero to hero guide]
* https://bloclibrary.dev/#/[BLOC library guides]
